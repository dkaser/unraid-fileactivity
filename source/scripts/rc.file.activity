#!/bin/bash
# Usage:
# start|stop|clear|update.
#

file_activity_start() {
	logger "Starting File Activity" -t"$PROG_NAME"

	# Is file activity running?
	if [ ! -e "/var/run/${plugin}.pid" ]; then
		echo "Starting File Activity..."

		# Path to the file containing mount points
		disks_file="/tmp/${plugin}/${plugin}.disks"

		# Initialize directory count
		dir_count=0

		# Loop through each mount point in the file
		while IFS= read -r mount_point; do
			if [ -d "$mount_point" ]; then
				# Count directories in the mount point
				count=$(find "$mount_point" -type d 2>/dev/null | wc -l)
				dir_count=$((dir_count + count))
			fi
		done < "$disks_file"

		# Calculate the required watches with a 10% buffer
		required_watches=$((dir_count + (dir_count / 10)))

		# Find the current inotify watches being used
		current_watches=$(find /proc/*/fd -lname anon_inode:inotify | cut -d/ -f5 | grep -v 'no such file or directory' | awk '{s+=$1} END {print s}')

		# Calculate the new limit
		new_limit=$((current_watches + required_watches))

		# Check the current maximum limit
		current_limit=$(cat /proc/sys/fs/inotify/max_user_watches)

		# Update the limit if necessary
		if [ "$new_limit" -gt "$current_limit" ]; then
			logger "Updating inotify max_user_watches from '$current_limit' to '$new_limit'" -t"$PROG_NAME"

			# Set the inotify max_user_watches.
			sysctl -qw fs.inotify.max_user_watches="$new_limit" > /dev/null
		fi

		# Start inotify script to monitor disk events
		at -M -f /usr/local/emhttp/plugins/file.activity/scripts/inotify.file.activity now 2>/dev/null

		sleep 2
	else
		echo "File Activity already running"
		logger "File Activity already running" -t"$PROG_NAME"
	fi
}

file_activity_stop() {
	logger "Stopping File Activity" -t"$PROG_NAME"

	# Is the files active inotify script running?
	if [ -e "/var/run/${plugin}.pid" ]; then
		echo "Stopping File Activity..."

		# Kill all file activity processes.
		for pid in $(ps -ef | grep .*inotifywait.*appdata | grep -v grep | awk "{ print \$2}")
		do
			kill $pid >/dev/null 2>&1
		done	

		sleep 2
	else
		echo "File Activity is not running"
		logger "File Activity is not running" -t"$PROG_NAME"
	fi
}

file_activity_clear() {
	# Clear the file activity log.
	echo "" > /var/log/file.activity.log
}

file_activity_update() {
	file_activity_stop

	# Start file activity if service is enabled and not already running.
	if [ "$SERVICE" = "enable" ]; then
		file_activity_start
	fi
}

plugin="file.activity"
CONFIG="/boot/config/plugins/${plugin}/${plugin}.cfg"
source $CONFIG
PROG_NAME=${plugin}

case "$1" in
	'start')
		file_activity_start
	;;
	'stop')
		file_activity_stop
	;;
	'clear')
		file_activity_clear
	;;
	'update')
		file_activity_update
	;;
	*)
		echo "usage $0 start|stop|clear|update"
esac
